// Each section is labeled with a comment describing
// how much data the section takes when minified

@debug "-------------------------";
$breakpoints: "sm" "md" "lg" "freeze";
$bleeds: "lg" "freeze";
$used: "sm" "md" "lg";

$sm--unit: 100vw / 64;
$lg--unit: 100vw / 66;
$freeze--unit: 1650px / 66;

$ratios: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16;

$map: (
 sm--breakpoint: 0px,
 sm--columns: 4,
 sm--padding: 4,
 sm--unit: $sm--unit,
 md--breakpoint: 640px,
 md--columns: 8,
 md--padding: 2,
 md--unit: $sm--unit,
 lg--breakpoint: 1056px,
 lg--columns: 16,
 lg--padding: 1,
 lg--unit: $lg--unit,
 lg--width: 100vw,
 freeze--breakpoint: 1650px,
 freeze--padding: 1,
 freeze--unit: $freeze--unit,
 freeze--width: 1650px
);

html, body {
  margin: 0;
  overflow-x: hidden;
}

// Container
.ibm {
  box-sizing: border-box;
  margin: auto;
  max-width: map-get($map, freeze--breakpoint);
  width: 100vw;

  @media (min-width: map-get($map, lg--breakpoint)) {
    padding: 0 map-get($map, lg--unit);
  }

  @media (min-width: map-get($map, freeze--breakpoint)) {
    padding: 0 map-get($map, freeze--unit);
  }
}

// cols
.ibm,
.ibm-col-group {
  display: flex;
  flex-wrap: wrap;

  > * {
    width: 100vw;
  }
}

.ibm-col-compact{
  display: block;
}

.ibm > *,
.ibm-col-group > *,
.ibm-col-full_padding,
.ibm-col-ratio_content {
  box-sizing: border-box;

  > *:first-child {
    margin-top: 0;
  }

  > *:last-child {
    margin-bottom: 0;
  }

  @each $bp in $breakpoints {
    @if map-has-key($map, #{$bp}--breakpoint) {
      @media (min-width: map-get($map, #{$bp}--breakpoint)) {
        padding: map-get($map, #{$bp}--unit) * map-get($map, #{$bp}--padding);

        &.ibm-col-tall {
          padding-bottom: 2 * map-get($map, #{$bp}--unit) * map-get($map, #{$bp}--padding);
          padding-top: 2 * map-get($map, #{$bp}--unit) * map-get($map, #{$bp}--padding);
        }
      }
    }
  }
}

.ibm > *,
.ibm-col-group > * {
  @media (min-width: map-get($map, lg--breakpoint)) {
    width: #{100vw - 2 * map-get($map, lg--unit)};
  }

  @media (min-width: map-get($map, freeze--breakpoint)) {
    width: #{map-get($map, freeze--breakpoint) - 2 * map-get($map, freeze--unit)};
  }
}

.ibm-col-group,
.ibm-col-full {
  padding: 0;
  position: relative;
}

@each $bp in $used {
  @if map-has-key($map, #{$bp}--breakpoint) {
    $next: index($used, $bp) + 1;
    $next-bp: nth($breakpoints, $next);
    $next-width: map-get($map, #{$next-bp}--breakpoint);
    .ibm-col-#{$bp}-0-only {
      @if $bp != 'lg' {
        @media (min-width: map-get($map, #{$bp}--breakpoint)) and (max-width: #{$next-width - 1px}) {
          display: none;
        }
      } @else {
        @media (min-width: map-get($map, #{$bp}--breakpoint)) {
          display: none;
        }
      }
    }

    .ibm .ibm-col-#{$bp}-0 {
      @media (min-width: map-get($map, #{$bp}--breakpoint)) {
        display: none;
      }

      // Hidden cols don't need to return if hidden at large
      @if $bp != 'lg' {
        @media (min-width: $next-width) {
          &[class*="ibm-col-#{$next-bp}-"] {
            display: initial;

            &.ibm-col-group {
              display: flex;
            }
          }
        }

        // If col is hidden at small, it can return with both a medium or large classname
        @if $bp == 'sm' {
          @media (min-width: map-get($map, lg--breakpoint)) {
            &[class*="ibm-col-lg-"] {
              display: initial;

              &.ibm-col-group {
                display: flex;
              }
            }
          }
        }
      }
    }
  }
}

@each $bp in $breakpoints {
  @if map-has-key($map, #{$bp}--breakpoint) {
    @media (min-width: map-get($map, #{$bp}--breakpoint)) {
      // col width - <1kb
      @if map-has-key($map, #{$bp}--columns) {
        $columns: map-get($map, #{$bp}--columns);
        $a: 1;
        @while $a <= $columns {
          // Can avoid sm-2 because that is default behavior.
          @if ($bp != 'sm' or $a != 4) {
            // col width
            .ibm-col-#{$bp}-#{$a} {
              @if ($bp != 'lg') {
                width: 100vw / $columns * $a;
              }
            }
          }
          $a: $a + 1;
        }
      }
    }

    @media (min-width: map-get($map, lg--breakpoint)) {
      @if map-has-key($map, #{$bp}--columns) {
        $columns: map-get($map, #{$bp}--columns);
        $a: 1;
        @while $a <= $columns {
          // col width
          .ibm-col-#{$bp}-#{$a} {
            width: round((100vw - map-get($map, #{$bp}--unit) * 2) / $columns * $a * 10000) / 10000;
          }
          $a: $a + 1;
        }
      }
    }

    @media (min-width: map-get($map, freeze--breakpoint)) {
      @if map-has-key($map, #{$bp}--columns) {
        $columns: map-get($map, #{$bp}--columns);
        $a: 1;
        @while $a <= $columns {
          // col width
          .ibm-col-#{$bp}-#{$a} {
            width: (map-get($map, freeze--breakpoint) - map-get($map, freeze--unit) * 2) / $columns * $a;
          }
          $a: $a + 1;
        }
      }
    }
  }
}